coef(fit, s=fit$lambda.1se)
varImpPlot(fit)
caret::getModelInfo("glmnet")$glmnet$varImp
caret::varImp(fit)
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
caret::varImp(fit)
varImp(cvfit, lambda = cvfit$lambda.min)
caret::varImp(cvfit, lambda = cvfit$lambda.min)
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
list.of.packages <- c("glmnet", "caret", "ff")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
fit = randomForest(formula, data_frame, importance = TRUE)
imp = importance(fit)
imp
var_plot = varImpPlot(fit)
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = cv.glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
varImp(fit, lambda = fit$lambda.min)
varImp(fit, lambda = fit$lambda.min)
sapply(list.of.packages, library)
sapply(list.of.packages, require)
pacman::p_load(list.of.packages)
fit = cv.glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
varImp(fit, lambda = fit$lambda.min)
library(caret)
varImp(fit, lambda = fit$lambda.min)
fit = cv.glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
varImp(fit, lambda = fit$lambda.min)
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
varImp(fit, lambda = fit$lambda.min)
fit$lambda.min
varImp(fit, lambda = min(fit$lambda))
fit = cv.glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
caret::varImp(fit, lambda = fit$lambda.min)
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
caret::varImp(fit, lambda = fit$lambda.min)
caret::varImp(fit, lambda = 1)
caret::varImp(fit, lambda = min(fit$lambda))
imp = caret::varImp(fit, lambda = min(fit$lambda))
var_plot = plot(imp)
var_plot = plot(imp, type="h")
model.frame(formula, data_frame)
c = model.frame(formula, data_frame)
View(c)
View(x)
x = model.matrix(paste0(formula"-1"), data_frame)
x = model.matrix(paste0(formula,"-1"), data_frame)
paste0(formula,"-1")
formula-1
x = model.matrix(formula, data_frame)
imp
names(x)
colnames(x)
imp[,1]
imp = cbind(colnames(x),imp[,1])
View(imp)
imp = cbind.data.frame(colnames(x),imp[,1])
imp = caret::varImp(fit, lambda = min(fit$lambda))
fit
summary(fit)
imp
coef(fit, s=fit$lambda.1se)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
imp = caret::varImp(fit, lambda = min(fit$lambda))
formula = Formula::Formula(G3~.-1)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
View(imp)
var_plot = plot(imp)
varImpPlot
var_plot = plot(imp$`imp[, 1]`, imp$`colnames(x)`)
graphics.off()
var_plot = plot(imp$`imp[, 1]`, imp$`colnames(x)`)
imp = cbind.data.frame(as.character(colnames(x)),imp[,1])
var_plot = plot(imp$`imp[, 1]`, imp$`colnames(x)`)
imp = cbind.data.frame(colnames(x),imp[,1])
var_plot = plot(imp$`imp[, 1]`, imp$`colnames(x)`)
imp = cbind.data.frame(colnames(x),imp[,1])
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
summary(imp$`imp[, 1]`)
plot(imp)
dotchart(imp$`imp[, 1]`, xlab = colnames(imp)[i], ylab = "")
dotchart(imp$`imp[, 1]`, labels = imp$`colnames(x)`)
imp = imp[order(imp$`imp[, 1]`),]
imp
imp = imp[order(imp$`imp[, 1]`, decreasing = TRUE),]
imp
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.25),], labels = imp$`colnames(x)`)
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.25)], labels = imp$`colnames(x)`)
imp = imp[order(imp$`imp[, 1]`, decreasing = TRUE),]
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.25)], labels = imp$`colnames(x)`)
imp = imp[order(imp$`imp[, 1]`, decreasing = F),]
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.25)], labels = imp$`colnames(x)`)
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
imp = imp[order(imp$`imp[, 1]`, decreasing = F),]
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.25)], labels = imp$`colnames(x)`)
imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.25)]
imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.25)
quantile(imp$`imp[, 1]`,probs = 0.25)
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.25)], labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.25)])
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(glmnet)
library(caret)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
imp = imp[order(imp$`imp[, 1]`, decreasing = F),]
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.25)],
labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.25)], main = "Feature Importance Ranking Plot for GLM")
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.25)],
labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)], main = "Feature Importance Ranking Plot for GLM")
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)],
labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)], main = "Feature Importance Ranking Plot for GLM")
library(earth)
marsModel <- earth(formula, data_frame) # build model
ev <- evimp (marsModel)
ev
fit <- earth(formula, data_frame) # build model
imp <- evimp (fit)
imp
par(mfrow=c(1,2))
imp = evimp (fit)
dotchart(imp)
imp = as.data.frame(evimp (fit) )
graphics.off()
plot(imp)
data_frame[,names(data_frame)%in%as.character(formula)[2]]
feature_imp = function(formula, data_frame, path = "./", type = "rf"){
if (type == "rf")
{
if("randomForest" %in% rownames(installed.packages()) == FALSE) {install.packages("randomForest")}
library(randomForest)
fit = randomForest(formula, data_frame, importance = TRUE)
imp = importance(fit)
var_plot = varImpPlot(fit)
}
else if (type == "glm")
{
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(glmnet)
library(caret)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
imp = imp[order(imp$`imp[, 1]`, decreasing = F),]
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)],
labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)], main = "Feature Importance Ranking Plot for GLM")
} else if (type == "mars"){
if("earth" %in% rownames(installed.packages()) == FALSE) {install.packages("earth")}
library(earth)
if (!as.factor(data_frame[,names(data_frame)%in%as.character(formula)[2]])){
fit = earth(formula, data_frame) # build model
imp = evimp (fit)
var_plot = plot(imp)
} else {
cat("Mars model is used for the regression, therefore, it requires a numeric dependent variable")
}
}
png(filename = paste0(path,"var_plot_", type,".png"))
plot(fit)
dev.off()
}
feature_imp = function(formula, data_frame, path = "./", type = "rf"){
if (type == "rf")
{
if("randomForest" %in% rownames(installed.packages()) == FALSE) {install.packages("randomForest")}
library(randomForest)
fit = randomForest(formula, data_frame, importance = TRUE)
imp = importance(fit)
var_plot = varImpPlot(fit)
}
else if (type == "glm")
{
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(glmnet)
library(caret)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
imp = imp[order(imp$`imp[, 1]`, decreasing = F),]
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)],
labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)], main = "Feature Importance Ranking Plot for GLM")
} else if (type == "mars"){
if("earth" %in% rownames(installed.packages()) == FALSE) {install.packages("earth")}
library(earth)
if (!as.factor(data_frame[,names(data_frame)%in%as.character(formula)[2]])){
fit = earth(formula, data_frame) # build model
imp = evimp (fit)
var_plot = plot(imp)
} else {
cat("Mars model is used for the regression, therefore, it requires a numeric dependent variable")
}
}
png(filename = paste0(path,"var_plot_", type,".png"))
plot(fit)
dev.off()
return(imp)
}
feature_imp(formula, data_frame)
var_plot
fit = randomForest(formula, data_frame, importance = TRUE)
imp = importance(fit)
var_plot = varImpPlot(fit)
var_plot
feature_imp = function(formula, data_frame, path = "./", type = "rf"){
if (type == "rf")
{
if("randomForest" %in% rownames(installed.packages()) == FALSE) {install.packages("randomForest")}
library(randomForest)
fit = randomForest(formula, data_frame, importance = TRUE)
imp = importance(fit)
var_plot = varImpPlot(fit)
}
else if (type == "glm")
{
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(glmnet)
library(caret)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
imp = imp[order(imp$`imp[, 1]`, decreasing = F),]
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)],
labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)], main = "Feature Importance Ranking Plot for GLM")
} else if (type == "mars"){
if("earth" %in% rownames(installed.packages()) == FALSE) {install.packages("earth")}
library(earth)
if (!as.factor(data_frame[,names(data_frame)%in%as.character(formula)[2]])){
fit = earth(formula, data_frame) # build model
imp = evimp (fit)
var_plot = plot(imp)
} else {
cat("Mars model is used for the regression, therefore, it requires a numeric dependent variable")
}
}
png(filename = paste0(path,"var_plot_", type,".png"))
plot(var_plot)
dev.off()
return(imp)
}
feature_imp(formula, data_frame)
fit = randomForest(formula, data_frame, importance = TRUE)
imp = importance(fit)
var_plot = varImpPlot(fit)
View(var_plot)
var_plot
feature_imp(formula, data_frame, "mars")
graphics.off()
feature_imp = function(formula, data_frame, path = "./", type = "rf"){
if (type == "rf")
{
if("randomForest" %in% rownames(installed.packages()) == FALSE) {install.packages("randomForest")}
library(randomForest)
fit = randomForest(formula, data_frame, importance = TRUE)
imp = importance(fit)
var_plot = varImpPlot(fit)
}
else if (type == "glm")
{
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(glmnet)
library(caret)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
imp = imp[order(imp$`imp[, 1]`, decreasing = F),]
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)],
labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)], main = "Feature Importance Ranking Plot for GLM")
} else if (type == "mars"){
if("earth" %in% rownames(installed.packages()) == FALSE) {install.packages("earth")}
library(earth)
if (!as.factor(data_frame[,names(data_frame)%in%as.character(formula)[2]])){
fit = earth(formula, data_frame) # build model
imp = evimp (fit)
var_plot = plot(imp)
} else {
cat("Mars model is used for the regression, therefore, it requires a numeric dependent variable")
}
}
png(filename = paste0(path,"var_plot_", type,".png"))
plot(var_plot)
dev.off()
return(imp)
}
feature_imp(formula, data_frame, "mars")
feature_imp(formula, data_frame, type="mars")
feature_imp = function(formula, data_frame, path = "./", type = "rf"){
if (type == "rf")
{
if("randomForest" %in% rownames(installed.packages()) == FALSE) {install.packages("randomForest")}
library(randomForest)
fit = randomForest(formula, data_frame, importance = TRUE)
imp = importance(fit)
var_plot = varImpPlot(fit)
}
else if (type == "glm")
{
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(glmnet)
library(caret)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
imp = imp[order(imp$`imp[, 1]`, decreasing = F),]
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)],
labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)], main = "Feature Importance Ranking Plot for GLM")
} else if (type == "mars"){
if("earth" %in% rownames(installed.packages()) == FALSE) {install.packages("earth")}
library(earth)
if (!is.factor(data_frame[,names(data_frame)%in%as.character(formula)[2]])){
fit = earth(formula, data_frame) # build model
imp = evimp (fit)
var_plot = plot(imp)
} else {
cat("Mars model is used for the regression, therefore, it requires a numeric dependent variable")
}
}
png(filename = paste0(path,"var_plot_", type,".png"))
plot(var_plot)
dev.off()
return(imp)
}
feature_imp(formula, data_frame, type="mars")
readRDS("./student-mat_binary_class_fact.rds")
data_frame = readRDS("./student-mat_binary_class_fact.rds")
feature_imp = function(formula, data_frame, path = "./", type = "rf"){
if (type == "rf")
{
if("randomForest" %in% rownames(installed.packages()) == FALSE) {install.packages("randomForest")}
library(randomForest)
fit = randomForest(formula, data_frame, importance = TRUE)
imp = importance(fit)
var_plot = varImpPlot(fit)
}
else if (type == "glm")
{
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(glmnet)
library(caret)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
imp = imp[order(imp$`imp[, 1]`, decreasing = F),]
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)],
labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)], main = "Feature Importance Ranking Plot for GLM")
} else if (type == "mars"){
if("earth" %in% rownames(installed.packages()) == FALSE) {install.packages("earth")}
library(earth)
if (!is.factor(data_frame[,names(data_frame)%in%as.character(formula)[2]])){
fit = earth(formula, data_frame) # build model
imp = evimp (fit)
var_plot = plot(imp)
} else {
cat("Mars model is used for the regression, therefore, it requires a numeric dependent variable")
}
}
png(filename = paste0(path,"var_plot_", type,".png"))
plot(var_plot)
dev.off()
return(imp)
}
feature_imp(formula, data_frame, type="mars")
feature_imp("G3~.", data_frame, type="mars")
feature_imp(G3~., data_frame, type="mars")
feature_imp = function(formula, data_frame, path = "./", type = "rf"){
if (type == "rf")
{
if("randomForest" %in% rownames(installed.packages()) == FALSE) {install.packages("randomForest")}
library(randomForest)
fit = randomForest(formula, data_frame, importance = TRUE)
imp = importance(fit)
var_plot = varImpPlot(fit)
}
else if (type == "glm")
{
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(glmnet)
library(caret)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
imp = imp[order(imp$`imp[, 1]`, decreasing = F),]
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)],
labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)], main = "Feature Importance Ranking Plot for GLM")
} else if (type == "mars"){
if("earth" %in% rownames(installed.packages()) == FALSE) {install.packages("earth")}
library(earth)
if (!is.factor(data_frame[,names(data_frame)%in%as.character(formula)[2]])){
fit = earth(formula, data_frame) # build model
imp = evimp (fit)
var_plot = plot(imp)
} else {
return("Mars model is used for the regression, therefore, it requires a numeric dependent variable")
}
}
png(filename = paste0(path,"var_plot_", type,".png"))
plot(var_plot)
dev.off()
return(imp)
}
feature_imp(G3~., data_frame, type="mars")
feature_imp(G3~., data_frame)
feature_imp = function(formula, data_frame, path = "./", type = "rf")
{
if (type == "rf")
{
if("randomForest" %in% rownames(installed.packages()) == FALSE) {install.packages("randomForest")}
library(randomForest)
fit = randomForest(formula, data_frame, importance = TRUE)
imp = importance(fit)
var_plot = varImpPlot(fit)
}
else if (type == "glm")
{
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(glmnet)
library(caret)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
imp = imp[order(imp$`imp[, 1]`, decreasing = F),]
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)],
labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)], main = "Feature Importance Ranking Plot for GLM")
} else if (type == "mars")
{
if("earth" %in% rownames(installed.packages()) == FALSE) {install.packages("earth")}
library(earth)
if (!is.factor(data_frame[,names(data_frame)%in%as.character(formula)[2]])){
fit = earth(formula, data_frame) # build model
imp = evimp (fit)
var_plot = plot(imp)
} else {
return("Mars model is used for the regression, therefore, it requires a numeric dependent variable")
}
}
png(filename = paste0(path,"var_plot_", type,".png"))
var_plot
dev.off()
return(imp)
}
feature_imp(G3~., data_frame, type="mars")
feature_imp(G3~., data_frame)
