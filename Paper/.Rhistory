formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
library(parallel)
por_bin_fitC = createModelLibrary(data = data_bin_por[, !(colnames(data_bin_por)%in%c("G2","G1"))],
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
library(foreach)
por_bin_fitC = createModelLibrary(data = data_bin_por[, !(colnames(data_bin_por)%in%c("G2","G1"))],
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
library(doParallel)
por_bin_fitC = createModelLibrary(data = data_bin_por[, !(colnames(data_bin_por)%in%c("G2","G1"))],
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
list.of.packages <- c("doParallel","foreach", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
saveRDS(por_bin_fitC, "./predictions/models/por_bin_fitC.RDS")
max(por_bin_fitC$SVMradial$results$Accuracy)
max(por_bin_fitC$NN$results$Accuracy)
max(por_bin_fitC$RF$results$Accuracy)
max(por_bin_fitC$rpart$results$Accuracy)
pcc(rep(mean(data_bin_por$G3), 649),data_bin_por$G3)
p=names(which.max(summary(data_bin_por$G3)))
pcc(factor(rep(p, 649), levels = c("fail", "pass")),data_bin_por$G3)
saveRDS(por_bin_fitC, "./predictions/models/por_bin_fitC.RDS")
source(file = "./predictions/SPL_predictions.R")
source(file = "./metrics_for_evaluation.R")
model_setup = list("NN" = list(tuneGrid = expand.grid(decay = 10^seq(-4, 0, 0.5), size = seq(3, 13, 2)), maxit = 100, method = "nnet"),
"RF" = list(tuneGrid = expand.grid(mtry = c(5, 8, 10, 12, 15, 20)), ntree = 100, method = "rf"),
"rpart" = list(tuneGrid = expand.grid(cp = seq(0.001, 0.1, 0.01)), method = "rpart"),
"SVMradial" = list(tuneGrid = expand.grid(sigma = 2^seq(-12, -1), C = 2^seq(-12, 12)), method = "svmRadial"),
"SVMlinear" = list(tuneGrid = expand.grid(C = 2^seq(-12, 12)), method = "svmLinear"))
modellist = c("SVMradial", "NN", "RF", "rpart")
data_reg_mat = readRDS("./data/student-mat_reg.rds")
mat_reg_fitC = createModelLibrary(data = data_reg_mat[, !(colnames(data_reg_mat)%in%"G2")],
formula = G3~.,
modellist = modellist,
metric = "RMSE",
model_setup = model_setup )
mat_reg_fitC = createModelLibrary(data = data_reg_mat[, !(colnames(data_reg_mat)%in%c("G2","G1"))],
formula = G3~.,
modellist = modellist,
metric = "RMSE",
model_setup = model_setup )
min(mat_reg_fitC$SVMradial$results$RMSE)
min(mat_reg_fitC$NN$results$RMSE)
min(mat_reg_fitC$rpart$results$RMSE)
min(mat_reg_fitC$RF$results$RMSE)
saveRDS(mat_reg_fitC, "./predictions/models/mat_reg_fitC.RDS")
data_reg_por = readRDS("./data/student-por_reg.rds")
por_reg_fitC = createModelLibrary(data = data_reg_por[, !(colnames(data_reg_por)%in%c("G2","G1"))],
formula = G3~.,
modellist = modellist,
metric = "RMSE",
model_setup = model_setup )
min(por_reg_fitC$SVMradial$results$RMSE)
min(por_reg_fitC$NN$results$RMSE)
min(por_reg_fitC$RF$results$RMSE)
min(por_reg_fitC$rpart$results$RMSE)
saveRDS(por_reg_fitC, "./predictions/models/por_reg_fitC.RDS")
source(file = "./predictions/SPL_predictions.R")
source(file = "./metrics_for_evaluation.R")
model_setup = list("NN" = list(tuneGrid = expand.grid(decay = 10^seq(-4, 0, 0.5), size = seq(3, 13, 2)), maxit = 100, method = "nnet"),
"RF" = list(tuneGrid = expand.grid(mtry = c(5, 8, 10, 12, 15, 20)), ntree = 100, method = "rf"),
"rpart" = list(tuneGrid = expand.grid(cp = seq(0.001, 0.1, 0.01)), method = "rpart"),
"SVMradial" = list(tuneGrid = expand.grid(sigma = 2^seq(-12, -1), C = 2^seq(-12, 12)), method = "svmRadial"),
"SVMlinear" = list(tuneGrid = expand.grid(C = 2^seq(-12, 12)), method = "svmLinear"))
modellist = c("SVMradial", "NN", "RF", "rpart")
data_mul_mat = readRDS("./data/student-mat_multiclass.rds")
mat_mul_fitA = createModelLibrary(data = data_mul_mat,
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
max(mat_mul_fitA$SVMradial$results$Accuracy)
max(mat_mul_fitA$NN$results$Accuracy)
max(mat_mul_fitA$RF$results$Accuracy)
max(mat_mul_fitA$rpart$results$Accuracy)
pcc(data_mul_mat$G2,data_mul_mat$G3)
mat_mul_fitA$NN$results
max(mat_mul_fitA$NN$results$Accuracy, na.rm = TRUE)
saveRDS(mat_mul_fitA, "./predictions/models/mat_mul_fitA.RDS")
mat_mul_fitB = createModelLibrary(data = data_mul_mat[, !(colnames(data_mul_mat)%in%"G2")],
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
View(rmse)
max(por_mul_fitB$SVMradial$results$Accuracy)
max(por_mul_fitC$SVMradial$results$Accuracy)
max(mat_mul_fitB$SVMradial$results$Accuracy)
max(mat_mul_fitB$NN$results$Accuracy)
max(mat_mul_fitB$NN$results$Accuracy, na.rm = TRUE)
max(mat_mul_fitB$RF$results$Accuracy)
max(mat_mul_fitB$rpart$results$Accuracy)
saveRDS(mat_mul_fitB, "./predictions/models/mat_mul_fitB.RDS")
pcc(data_mul_mat$G1,data_mul_mat$G3)
mat_mul_fitC = createModelLibrary(data = data_mul_mat[, !(colnames(data_mul_mat)%in%c("G1","G2"))],
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
saveRDS(mat_mul_fitC, "./predictions/models/mat_mul_fitC.RDS")
max(mat_mul_fitC$SVMradial$results$Accuracy)
max(mat_mul_fitC$NN$results$Accuracy)
max(mat_mul_fitC$RF$results$Accuracy)
max(mat_mul_fitC$rpart$results$Accuracy)
m=names(which.max(summary(data_mul_mat$G3)))
pcc(factor(rep(m, 395), levels = c("fail", "pass")),data_mul_mat$G3)
pcc(factor(rep(m, 395), levels = levels(data_mul_mat$G3)),data_mul_mat$G3)
data_mul_por = readRDS("./data/student-por_multiclass.rds")
por_mul_fitA = createModelLibrary(data = data_mul_por,
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
max(por_mul_fitA$SVMradial$results$Accuracy)
max(por_mul_fitA$NN$results$Accuracy)
max(por_mul_fitA$NN$results$Accuracy, na.rm = TRUE)
max(por_mul_fitA$RF$results$Accuracy)
max(por_mul_fitA$rpart$results$Accuracy)
saveRDS(por_mul_fitA, "./predictions/models/por_mul_fitA.RDS")
pcc(data_mul_por$G2,data_mul_por$G3)
pcc(data_mul_por$G1,data_mul_por$G3)
por_mul_fitB = createModelLibrary(data = data_mul_por[, !(colnames(data_mul_por)%in%"G2")],
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
max(por_mul_fitB$SVMradial$results$Accuracy)
max(por_mul_fitB$NN$results$Accuracy, na.rm = TRUE)
max(por_mul_fitB$RF$results$Accuracy)
max(por_mul_fitB$rpart$results$Accuracy)
saveRDS(por_mul_fitB, "./predictions/models/por_mul_fitB.RDS")
por_mul_fitC = createModelLibrary(data = data_mul_por[, !(colnames(data_mul_por)%in%c("G2","G1"))],
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
max(por_mul_fitC$SVMradial$results$Accuracy)
max(por_mul_fitC$NN$results$Accuracy)
max(por_mul_fitC$RF$results$Accuracy)
max(por_mul_fitC$rpart$results$Accuracy)
saveRDS(por_mul_fitC, "./predictions/models/por_mul_fitC.RDS")
p=names(which.max(summary(data_mul_por$G3)))
pcc(factor(rep(p, 649), levels = levels(data_mul_por$G3)),data_mul_por$G3)
source(file = "./predictions/SPL_predictions.R")
source(file = "./metrics_for_evaluation.R")
model_setup = list("NN" = list(tuneGrid = expand.grid(decay = 10^seq(-4, 0, 0.5), size = seq(3, 13, 2)), maxit = 100, method = "nnet"),
"RF" = list(tuneGrid = expand.grid(mtry = c(5, 8, 10, 12, 15, 20)), ntree = 100, method = "rf"),
"rpart" = list(tuneGrid = expand.grid(cp = seq(0.001, 0.1, 0.01)), method = "rpart"),
"SVMradial" = list(tuneGrid = expand.grid(sigma = 2^seq(-12, -1), C = 2^seq(-12, 12)), method = "svmRadial"),
"SVMlinear" = list(tuneGrid = expand.grid(C = 2^seq(-12, 12)), method = "svmLinear"))
modellist = c("SVMradial", "NN", "RF", "rpart")
data_bin_mat = readRDS("./data/student-mat_binary.rds")
mat_bin_fitA = createModelLibrary(data = data_bin_mat,
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
saveRDS(mat_bin_fitA, "./predictions/models/mat_bin_fitA.RDS")
files = function(path) {
files = list.files(path, pattern = ".csv")
return(files)
}
data_path = "./data/"
files = files(data_path)
files
files = function(path) {
files = list.files(path, pattern = ".rds")
return(files)
}
data_path = "./data/"
files = files(data_path)
files
files = files("./predictions/models/")
files = function(path) {
files = list.files(path, pattern = ".rds")
return(files)
}
files = function(path) {
files = list.files(path, pattern = ".rds")
return(files)
}
files = files("./predictions/models/")
files
list.files("./predictions/models/", pattern = ".rds")
list.files("./predictions/models/", pattern = ".RDS")
ff = readRDS("./predictions/models/mat_bin_fitA.RDS")
binary = read.csv2("./results_analysis/binary.csv")
qplot(trans.factor, binary)
binary = read.csv2("./results_analysis/binary.csv")
library(ggplot2)
qplot(binary$pcc, binary$model)
plot(binary$pcc, binary$model)
plot.factor(binary$pcc, binary$model)
base::plot.factor(binary$pcc, binary$model)
plot(pcc~model, binary)
qplot(data=binary,
y=pcc,
x=model,
group=Input_type,
geom=c("point", "errorbar", "line"),
color=Class,
shape=Class,
width=0.25) + theme_bw()
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point", "errorbar", "line"),
color=Class,
shape=Class,
width=0.25) + theme_bw()
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point",  "line"),
color=Class,
shape=Class,
width=0.25) + theme_bw()
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point"),
color=Class,
shape=Class,
width=0.25) + theme_bw()
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point", "line"),
color=Class,
shape=Class,
width=0.25) + theme_bw()
qplot(data=binary,
y=pcc,
x=model,
group=Class,
geom=c("point"),
color=Class,
shape=Class,
width=0.25) + theme_bw()
qplot(data=binary,
y=pcc,
x=model,
group=Class,
geom=c("point", "line"),
color=Class,
shape=Class,
width=0.25) + theme_bw()
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point", "line"),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw()
ggplot(binary, aes(x=model, y=pcc)) +
geom_point(shape=Inut_type, color=Inut_type, width=0.25) +
geom_line(shape=Inut_type, color=Inut_type)
ggplot(binary, aes(x=model, y=pcc)) +
geom_point(shape=binary$Inut_type, color=binary$Inut_type, width=0.25) +
geom_line(shape=binary$Inut_type, color=binary$Inut_type)
ggplot(binary, aes(x=model, y=pcc)) +
geom_point() +
geom_line()
ggplot(binary, aes(x=model, y=pcc)) +
geom_point(aes(color=binary$Inut_type)) +
geom_line()
ggplot(binary, aes(x=model, y=pcc)) +
geom_point(aes(color=binary$Inut_type)) +
geom_line(aes(color=binary$Inut_type))
ggplot(binary, aes(x=model, y=pcc)) +
geom_point(aes(color=binary$Inut_type, color=binary$Inut_type)) +
geom_line(aes(color=binary$Inut_type, color=binary$Inut_type))
ggplot(binary, aes(x=model, y=pcc)) +
geom_point(aes(color=binary$Inut_type, color=binary$Inut_type)) +
geom_line(aes(color=binary$Inut_type))
ggplot(binary, aes(x=model, y=pcc)) +
geom_point(aes(color=binary$Inut_type, col=binary$Inut_type)) +
geom_line(aes(color=binary$Inut_type))
ggplot(binary, aes(x=model, y=pcc)) +
geom_point(aes(color=binary$Inut_type, fill=binary$Inut_type)) +
geom_line(aes(color=binary$Inut_type))
mg <- ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point()
mg + facet_grid(vs + am ~ gear)
mg <- ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point()
mg
mg + facet_grid(vs + am ~ gear)
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point", "line"),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw() + facet_grid(Class)
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point", "line"),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw() + facet_grid(binary$Class)
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point", "line"),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw() + facet_grid(binary$Class~)
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point", "line"),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw() + facet_grid(binary$Class~.)
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point", "line", "boxplot"),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw() #+ facet_grid(binary$Class~.)
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point", "line"),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw() + facet_grid(binary$Class~.)
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("boxplot"),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw() + facet_grid(binary$Class~.)
files = function(path) {
files = list.files(path, pattern = ".csv")
return(files)
}
data_path = "./data/"
files = files(data_path)
files
lm = readRDS("./data/student-mat_binary.rds")
fit = glm(G3~., lm, family = "binomial")
fit = glm(G3~., lm, family = binomial(link = "logit"))
pr = predict(fit, lm, type = "response")
pr
pr = predict(fit, lm, type = "prob")
View(as.data.frame(pr))
feature_imp = function(formula, data_frame, path = "./", type = "rf")
{
if (type == "rf")
{
if("randomForest" %in% rownames(installed.packages()) == FALSE) {install.packages("randomForest")}
library(randomForest)
fit = randomForest(formula, data_frame, importance = TRUE)
imp = importance(fit)
png(filename = paste0(path,"var_plot_", type,".png"))
var_plot = varImpPlot(fit)
dev.off()
}
else if (type == "glm")
{
list.of.packages <- c("glmnet", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(glmnet)
library(caret)
x = model.matrix(formula, data_frame)
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
fit = glmnet(x, y, family = ifelse(!is.factor(y), "gaussian",
ifelse(length(levels(y))>2, "multinomial", "binomial")))
imp = caret::varImp(fit, lambda = min(fit$lambda))
imp = cbind.data.frame(colnames(x),imp[,1])
imp = imp[order(imp$`imp[, 1]`, decreasing = F),]
png(filename = paste0(path,"var_plot_", type,".png"))
var_plot = dotchart(imp$`imp[, 1]`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)],
labels = imp$`colnames(x)`[imp$`imp[, 1]`>quantile(imp$`imp[, 1]`,probs = 0.45)], main = "Feature Importance Ranking Plot for GLM")
dev.off()
} else if (type == "mars")
{
if("earth" %in% rownames(installed.packages()) == FALSE) {install.packages("earth")}
library(earth)
if (!is.factor(data_frame[,names(data_frame)%in%as.character(formula)[2]])){
fit = earth(formula, data_frame) # build model
imp = evimp (fit)
png(filename = paste0(path,"var_plot_", type,".png"))
var_plot = plot(imp)
dev.off()
} else {
return("Mars model is used for the regression, therefore, it requires a numeric dependent variable")
}
} else if (type == "step_lm"){
if (!is.factor(data_frame[,names(data_frame)%in%as.character(formula)[2]])){
x = as.data.frame(model.matrix(formula, data_frame))
y = c(data_frame[,names(data_frame)%in%as.character(formula)[2]])
base.mod = lm(y ~ 1 , x)  # base intercept only model
all.mod = lm(y ~ . , x) # full model with all predictors
stepMod = step(base.mod, scope = list(lower = base.mod, upper = all.mod), direction = "both", trace = 0, steps = 1000)  # perform step-wise algorithm
imp = cbind.data.frame(stepMod$coefficients)
imp$abs = abs(imp$`stepMod$coefficients`)
imp = imp[order(imp$abs, decreasing = FALSE),]
imp = imp[!(row.names(imp)%in%"(Intercept)"),]
png(filename = paste0(path,"var_plot_", type,".png"))
dotchart(imp$abs,labels = row.names(imp), main = "Feature Importance Ranking Plot for Result of Stepwise LR")
dev.off()
} else {
return("Stepwise linear model (lm) is used for the regression, therefore, it requires a numeric dependent variable")
}
}
return(imp)
}
feature_imp(G3~., lm)
runParallel = detectCores() -1
list.of.packages <- c("doParallel","foreach", "caret")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(caret); library(foreach); library(doParallel)
runParallel = detectCores() -1
runParallel
source(file = "./predictions/SPL_predictions.R")
source(file = "./metrics_for_evaluation.R")
model_setup = list("NN" = list(tuneGrid = expand.grid(decay = 10^seq(-4, 0, 0.5), size = seq(3, 13, 2)), maxit = 100, method = "nnet"),
"RF" = list(tuneGrid = expand.grid(mtry = c(5, 8, 10, 12, 15, 20)), ntree = 100, method = "rf"),
"rpart" = list(tuneGrid = expand.grid(cp = seq(0.001, 0.1, 0.01)), method = "rpart"),
"SVMradial" = list(tuneGrid = expand.grid(sigma = 2^seq(-12, -1), C = 2^seq(-12, 12)), method = "svmRadial"),
"SVMlinear" = list(tuneGrid = expand.grid(C = 2^seq(-12, 12)), method = "svmLinear"))
modellist = c("SVMradial", "NN", "RF", "rpart")
data_bin_mat = readRDS("./data/student-mat_binary.rds")
mat_bin_fitA = createModelLibrary(data = data_bin_mat,
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
binary = read.csv2("./results_analysis/binary.csv")
mat_bin_fitA
mat_bin_fitA$SVMradial$bestTune
max(mat_bin_fitB$SVMradial$results$Accuracy)
max(mat_bin_fitA$SVMradial$results$Accuracy)
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point", "line"),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw() #+ facet_grid(binary$Class~.)
binary = read.csv2("./results_analysis/binary.csv")
library(ggplot2)
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point", "line"),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw() #+ facet_grid(binary$Class~.)
View(binary)
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("point", "line"),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw() + facet_grid(binary$Class~.)
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c(""),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw() + facet_grid(binary$Class~.)
qplot(data=binary,
y=pcc,
x=model,
group=Inut_type,
geom=c("boxplot"),
color=Inut_type,
shape=Inut_type,
width=0.25) + theme_bw() + facet_grid(binary$Class~.)
fft
.Call(C_fft, z, inverse)
install.packages(spectral)
install.packages("spectral")
library(spectral)
spec.fft
