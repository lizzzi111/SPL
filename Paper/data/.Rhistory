levels(as.factor(y))
levels(factor(y))
factor(y)
y = c(data[,names(data)%in%as.character(formula)[2]])
levels(factor(y))
length(levels(factor(y)))
summaryFunction = ifelse(!is.factor(y), postResample, ifelse(length(levels(y))>2, multiClassSummary, twoClassSummary))
createModelLibrary <- function(formula, data, modellist = c("rf"), model_setup, metric = "ROC", model_control = NULL, preProcess = NULL){
start.time <- Sys.time()
# in order to identify what kind of DM problem we are dealing with
y = c(data[,names(data)%in%as.character(formula)[2]])
# Specify model estimation control settings, as given in the paper
if(is.null(model_control)){
model_control <- trainControl(
method = "cv", # cross validation
number = 10, # number of folds in cross validation
repeats = 200, # number for repeated cross validation
savePredictions = FALSE,
classProbs = TRUE,
summaryFunction = ifelse(!is.factor(y), postResample, ifelse(length(levels(y))>2, multiClassSummary, twoClassSummary)),
returnData = FALSE
)}
# Training
# use caret package
message("Start model training")
modelLibrary <- list()
for(model in modellist){
message(paste("Start training model", model, "at", Sys.time()))
modelObject <- try(do.call(caret::train, c(
list(
form = formula,
data = data,
trControl = model_control, # specify the control parameters
preProcess = preProcess, # standardize variables by centering and scaling. Also exclude variables with no variance
metric = metric # specify metric, e.g. RSME, ROC (auc).
),
# Specify the list of models and training parameters for training
model_setup[[model]]
))
)
if("train" %in% class(modelObject)) {modelLibrary[[model]] <- modelObject
} else{warning("Failed to train model ", model, ". ", modelObject)}
rm(modelObject)
}
end.time <- Sys.time() # Print time
message(paste("Training time:",end.time - start.time))
# Save trained model library
#saveRDS(modelLibrary, sprintf("modelLibrary %s target_%s balanced_%s varSelection_%s.rds", analysisName, targetVariable, balanceDataset, variableSelectionMethod))
#if(runParallel == TRUE)try(stopCluster(cl)) # Close connections to the parallelization cluster
return(modelLibrary)
}
rr = createModelLibrary(formula, data , modellist = c("RF", "SVMRadial"))
rr = createModelLibrary(formula, data , modellist = c("RF", "SVMRadial"), model_setup = model_setup)
rr = createModelLibrary(formula, data , modellist = c("RF", "SVMRadial"), metric = pcc, model_setup = model_setup)
rr = createModelLibrary(formula, data , modellist = c("RF", "SVMRadial"), metric = "pcc", model_setup = model_setup)
rr = createModelLibrary(formula, data , modellist = c("RF", "SVMRadial"), metric = "rsme", model_setup = model_setup)
rr = createModelLibrary(formula, data , modellist = c("RF", "SVMradial"), metric = "rsme", model_setup = model_setup)
rr = createModelLibrary(formula, data , modellist = c("RF", "SVMradial"), metric = "RMSE", model_setup = model_setup)
createModelLibrary <- function(formula, data, modellist = c("rf"), model_setup, metric = "ROC", model_control = NULL, preProcess = NULL){
start.time <- Sys.time()
# in order to identify what kind of DM problem we are dealing with
y = c(data[,names(data)%in%as.character(formula)[2]])
# Specify model estimation control settings, as given in the paper
if(is.null(model_control)){
model_control <- trainControl(
method = "cv", # cross validation
number = 10, # number of folds in cross validation
repeats = 200, # number for repeated cross validation
savePredictions = FALSE,
classProbs = TRUE,
#summaryFunction = ifelse(!is.factor(y), postResample, ifelse(length(levels(y))>2, multiClassSummary, twoClassSummary)),
returnData = FALSE
)}
# Training
# use caret package
message("Start model training")
modelLibrary <- list()
for(model in modellist){
message(paste("Start training model", model, "at", Sys.time()))
modelObject <- try(do.call(caret::train, c(
list(
form = formula,
data = data,
trControl = model_control, # specify the control parameters
preProcess = preProcess, # standardize variables by centering and scaling. Also exclude variables with no variance
metric = metric # specify metric, e.g. RSME, ROC (auc).
),
# Specify the list of models and training parameters for training
model_setup[[model]]
))
)
if("train" %in% class(modelObject)) {modelLibrary[[model]] <- modelObject
} else{warning("Failed to train model ", model, ". ", modelObject)}
rm(modelObject)
}
end.time <- Sys.time() # Print time
message(paste("Training time:",end.time - start.time))
# Save trained model library
#saveRDS(modelLibrary, sprintf("modelLibrary %s target_%s balanced_%s varSelection_%s.rds", analysisName, targetVariable, balanceDataset, variableSelectionMethod))
#if(runParallel == TRUE)try(stopCluster(cl)) # Close connections to the parallelization cluster
return(modelLibrary)
}
rr = createModelLibrary(formula, data , modellist = c("RF", "SVMradial"), metric = "RMSE", model_setup = model_setup)
кк
rr
pred = predict(rr$RF, data)
pred
plot(pred)
summary(pred)
rmse(pred, data$G3)
head(pred)
head(data$G3)
rmse()
rmse
pcc
RMSE
rmse  = function(y_pred, y_true){
if (length(y_pred)!=length(y_true)){
return("The vectors have to be of the same length")
} else if (!is.numeric(y_pred)|!is.numeric(y_pred)){
return("Root mean sqared can be calculated only on numeric data")
} else {
pcc =   sqrt(mean((y_true - y_pred)^2))
return(pcc)
}
}
rmse  = function(y_pred, y_true){
if (length(y_pred)!=length(y_true)){
return("The vectors have to be of the same length")
} else if (!is.numeric(y_pred)|!is.numeric(y_pred)){
return("Root mean sqared can be calculated only on numeric data")
} else {
rmse =   sqrt(mean((y_true - y_pred)^2))
return(rmse)
}
}
rmse(pred, data$G3)
pred = predict(rr$SVMradial, data)
rmse(pred, data$G3)
pred = predict(rr$SVMradial, head(data, 150))
rmse(pred, data$G3)
rmse(pred, head(data, 150))
rmse(pred, head(data, 150))
length(pred)
length(head(data, 150))
head(data, 150)
head(data, 150L)
head(data, n=150L)
ds = head(data, 150)
rmse(pred, head(data$G3, 150))
rr$RF$results
rr$RF$bestTune
rr$RF$finalModel
data = readRDS("./data/student-mat_class_fact.rds")
mm = createModelLibrary(formula, data, model_setup = model_setup, metric = "RMSE", modellist = c("SVMradial", "SVMlinear", "RF"))
data_prep = function(file_name, type = "multiclass"){
library(dplyr)
data_frame = read.csv(file_name, sep = ",", header = TRUE)
file_name = strsplit(file_name, split = "[.]")[[1]][1]
variables_to_factors = c("Medu", "Fedu", "famrel", "freetime",
"health", "goout", "Walc", "Dalc",
"traveltime", "studytime")
data_frame = data_frame %>%
mutate_each_(funs(factor), vars=variables_to_factors)
if(type == "regression"){
saveRDS(data_frame, file = paste0(file_name, "_reg_fact.rds"))
cat("Data preprocessing for", file_name, "as a", type, "problem is finished\n")
}else if(type == "multiclass"){
data_frame$G1 = factor(ifelse(data_frame$G1 >= 16, "excellent_very good",
ifelse(data_frame$G1 >= 14, "good",
ifelse(data_frame$G1 >= 12, "satisfactory",
ifelse(data_frame$G1 >= 10, "sufficient", "fail")))))
data_frame$G2 = factor(ifelse(data_frame$G2 >= 16, "excellent_very good",
ifelse(data_frame$G2 >= 14, "good",
ifelse(data_frame$G2 >= 12, "satisfactory",
ifelse(data_frame$G2 >= 10, "sufficient", "fail")))))
data_frame$G3 = factor(ifelse(data_frame$G3 >= 16, "excellent_very good",
ifelse(data_frame$G3 >= 14, "good",
ifelse(data_frame$G3 >= 12, "satisfactory",
ifelse(data_frame$G3 >= 10, "sufficient", "fail")))))
saveRDS(data_frame, file = paste0(file_name, "_class_fact.rds"))
cat("Data preprocessing for", file_name, "as a multiclass", type, "problem is finished\n")
} else if(type == "binary"){
data_frame$G1 = factor(ifelse(data_frame$G1 >= 10, "pass", "fail"))
data_frame$G2 = factor(ifelse(data_frame$G2 >= 10, "pass", "fail"))
data_frame$G3 = factor(ifelse(data_frame$G3 >= 10, "pass", "fail"))
saveRDS(data_frame, file = paste0(file_name, "_binary_class_fact.rds"))
cat("Data preprocessing for", file_name, "as a", type, "classification problem is finished\n")
}
}
sapply(files, function(x) data_prep(x, "multiclass"))
files = function(path){
files =  list.files(path ,pattern=".csv")
return(files)
}
data_path = "/Users/lizzzi111/Documents/Master/SoSe17/SPL/SPL/Paper/data/"
files = files(data_path)
sapply(files, function(x) data_prep(x, "multiclass"))
files = files(data_path)
data_path = "/Users/lizzzi111/Documents/Master/SoSe17/SPL/SPL/Paper/data/"
files = files(data_path)
files = function(path){
files =  list.files(path ,pattern=".csv")
return(files)
}
files = files(data_path)
sapply(files, function(x) data_prep(x, "multiclass"))
getwd()
setwd(data_path)
sapply(files, function(x) data_prep(x, "multiclass"))
data = readRDS("./data/student-mat_class_fact.rds")
df = data.frame(x1 = c(1,3,3,5), x2 = c(1,3.5,0.5,3))
df
cov(df)
cor(df)
cor
cor(df)
var(df$x1)
var()
var
C_cov
varx1 = (df$x1-mean(df$x1))^2
varx1 = sum(df$x1-mean(df$x1)^2)
mean(df$x1)
1/(sqrt(2)*1)
1/(sqrt(1.625)*1)
sqrt(1)
mnvec <- c(mean(x1),mean(x2))
x1 <- c(1,3,3,5)
x2 <- c(1,3.5,0.5,3)
mnvec <- c(mean(x1),mean(x2))
mnvec
cv <- c(cov(x1,x1),cov(x1,x2),cov(x2,x1),cov(x2,x2))
cv
comx <- matrix(data=cv,nrow=2,ncol=2)
comx
cr <- c(cor(x1,x1),cor(x1,x2),cor(x2,x1),cor(x2,x2))
cr
dft_dat <- c(1/sqrt(2),1/sqrt(2),1/sqrt(2),-1/sqrt(2))
dft_dat
DFT <- matrix(data=dft_dat,nrow = 2,ncol=2)
DFT
mnvec_new <- DFT%*%mnvec
mnvec_new
cov_new <- DFT%*%comx%*%DFT
cor_new <- DFT%*%crmx%*%DFT
sqrt(sum(mnvec_new^2))
sqrt(sum(mnvec^2))
det(comx)
det(cov_new)
plot(x1,x2,pch=1,xlab = 'Diagonale [mm]',ylab = 'Abstand Metallstreifen zum Rand [mm]')
points(mnvec[1],mnvec[2],pch=5)
points(sqrt(var(x1)),sqrt(var(x2)),pch=8)
typ = c(rep("P",8), rep("B",8))
t = read.csv("/Users/lizzzi111/Documents/Master/SoSe17/Pattern Rec/briefe_post.csv")
View(t)
t = read.csv("/Users/lizzzi111/Documents/Master/SoSe17/Pattern Rec/briefe_post.csv", dec = ",", sep=";")
View(t)
t = read.csv("/Users/lizzzi111/Documents/Master/SoSe17/Pattern Rec/briefe_post.csv", dec = ",", sep=";", header = F)
View(t)
x1 = t$V2
x2 = t$V3
mnvec <- c(mean(x1),mean(x2))
cv <- c(cov(x1,x1),cov(x1,x2),cov(x2,x1),cov(x2,x2))
comx <- matrix(data=cv,nrow=2,ncol=2)
comx
cr <- c(cor(x1,x1),cor(x1,x2),cor(x2,x1),cor(x2,x2))
cr <- c(cor(x1,x1),cor(x1,x2),cor(x2,x1),cor(x2,x2))
crmx <- matrix(data = cr,nrow=2,ncol=2)
crmx
eigen = comx
eigen = eigen(comx)
eigen
eigen
rm(eigen)
eigen
eigen = eigen(comx)
pro = comx*eigen$values
pro = eigen$values*eigen$vectors
pro = comx*eigen$values
pro2 = eigen$values*eigen$vectors
pro = comx%*%eigen$values
pro2 = eigen$values%*%eigen$vectors
pro2 = eigen$values*eigen$vectors
lhs = comx%*%eigen$values
lhs = comx%*%eigen$vectors
Phi = eigen$vectors
View(Phi)
solve()
lhs = comx%*%Phi
lhs
Phi
lhs = comx%*%Phi
eigen(lhs)
diag(eigen(lhs)$values)
lambda = diag(eigen(lhs)$values)
lambda2 = solve(Phi)%*% comx %*% Phi
lambda2
KLT = eigen$vectors
KLT
NED1 = t(KLT)%*%x1
t(KLT)
x1
cbind(x1,x1)
t(KLT)
NEW= t(KLT)%*%cbind(x1,x2)
NEW= t(KLT)%*%t(cbind(x1,x2))
NEW
View(NEW)
NEW= t(t(KLT)%*%t(cbind(x1,x2)))
NEW
plot(NEW)
plot(x1,x2)
pca <- prcomp(cbind(x1,x2))
pca
scale(newdata, pca$center, pca$scale) %*% pca$rotation
plot(pca)
eigen = eigen(comx)
KLT = eigen$vectors
KLT
eigen = eigen(comx)
eigen
Phi = eigen$vectors
C_y = Phi%*% comx %*% solve(Phi)
C_y = Phi%*% comx %*% t(Phi)
C_y
Phi = t(eigen$vectors)
C_y = Phi%*% comx %*% t(Phi)
C_y
Phi = eigen$vectors
Phi = t(eigen$vectors)
r <- eigen(A); V <- r$vectors; lam <- r$values;
A = V Lmbd V^(-1)
r <- eigen(A); V <- r$vectors; lam <- r$values;
A = V%*% Lmbd%*% V^(-1)
r <- eigen(A)
C_y = Phi%*% comx %*% t(Phi)
C_y
mnvec <- c(mean(x1),mean(x2))
cv <- c(cov(x1,x1),cov(x1,x2),cov(x2,x1),cov(x2,x2))
comx <- matrix(data=cv,nrow=2,ncol=2)
cr <- c(cor(x1,x1),cor(x1,x2),cor(x2,x1),cor(x2,x2))
crmx <- matrix(data = cr,nrow=2,ncol=2)
eigen = eigen(comx)
Phi = t(eigen$vectors)
C_y = Phi%*% comx %*% t(Phi)
C_y
x1
x2
Phi
y = Phi * x1
y = Phi %*% (x1)
y = Phi %*% t(x1)
Phi
x1
y = Phi %*% t(cbind(x1, x2))
y
Phi = eigen$vectors
y = Phi %*% t(cbind(x1, x2))
y
Phi = t(eigen$vectors)
y = Phi %*% t(cbind(x1, x2))
y = (t(Phi) %*% t(cbind(x1, x2)))
y
y = (Phi %*% t(cbind(x1, x2)))
y
y = t(abs(Phi %*% t(cbind(x1, x2))))
y
plot(y)
Phi
y
NED1 = y[,1]
NED2 = y[,2]
plot(x1,x2,pch=1,xlab = 'Diagonale [mm]',ylab = 'Abstand Metallstreifen zum Rand [mm]')
points(mnvec[1],mnvec[2],pch=5)
points(sqrt(var(x1)),sqrt(var(x2)),pch=8)
ggplot(aes(x=x1, y=x2))
ggplot(aes(x1, x2))
x1 = t$V2
x2 = t$V3
ggplot(aes(x1, x2))
ggplot(data = t, aes(V2, V3))
ggplot(data = t, aes(V2, V3))+geom_abline(NED1)
ggplot(data = t, aes(V2, V3))+aes(NED1)
NED1
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
g <- ggbiplot(y, obs.scale = 1, var.scale = 1,
ellipse = TRUE,
circle = TRUE)
library(ggbiplot)
g <- ggbiplot(y, obs.scale = 1, var.scale = 1,
ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
NED1
plot(NED1)
ggplot(data = t, aes(V2, V3)) + geom_point(NED1)
ggplot(data = t, aes(V2, V3)) + geom_point(data=NED1)
plot(x1,x2,pch=1,xlab = 'Diagonale [mm]',ylab = 'Abstand Metallstreifen zum Rand [mm]')
points(mnvec[1],mnvec[2],pch=5)
points(sqrt(var(x1)),sqrt(var(x2)),pch=8)
var(NED1)
var(NED2)
var(x1)
var(x2)
aov(x1~NED1)
a = aov(x1~NED1)
a$model
plot(x1,x2)
plot(x1,x2, xlab = "gewicht [g]", ylab = "diagonal [mm]")
points(NED1, type = "p")
points(NED1, type = "h")
plot(x1,x2, xlab = "gewicht [g]", ylab = "diagonal [mm]")
points(NED1, type = "s")
points(NED1,NED2, type = "p", pch=5 )
points(NED1,NED2, type = "p" )
plot(x1,x2, xlab = "gewicht [g]", ylab = "diagonal [mm]")
points(NED1,NED2, type = "p" )
points(NED1,NED2, type = "p" , pch=4)
plot(x1,x2, xlab = "gewicht [g]", ylab = "diagonal [mm]")
points(NED1,NED2, type = "p" , pch=4)
a1 = aov(NED1~NED2)
a1
p_value <- summary(a1)[[1]]$'Pr(>F)'[1]
p_value
summary(a1)
a1 = aov(x2~NED2)
summary(a1)
a1 = aov(x1~NED1)
summary(a1)
a2 = aov(x2~NED2)
summary(a2)
a1 = aov(NED1~t$V1)
summary(a1)
a2 = aov(NED2~t$V1)
summary(a2)
a11 = aov(t$V2~t$V1)
summary(a11)
a22 = aov(t$V3~t$V1)
summary(a22)
library(ggfortify)
install.packages(ggfortify)
library(ggplot2)
df = cbind(NED1,NED2, x1,x2)
ll= prcomp(cbind(x1,x2))
ll
NED1
y
Phi
ll
library(FactoMineR)
ll2 = princomp(cbind(x1,x2))
ll2
ll2$scores
NED1
ll2 = princomp(cbind(x1,x2), cor = F)
ll2
plot(ll2)
biplot(ll2)
princomp
NED1
ll2$loadings
biplot(ll2, xlab="NED1")
biplot(ll2, xlab="NED1", ylab="NED2")
KLT = ll2$loadings
KLT
Phi
biplot(ll2, xlabs=c("NED1", "Gewicht [g]"), ylabs=c("NED2", "Diagonal [mm]") )
biplot(ll2, xlabs="NED1", ylabs="NED2" )
biplot(ll2, xlabs="NED1", ylabs="NED2" )
Gewicht_g = t$V2
Diag_mm = t$V3
library(FactoMineR)
ll2 = princomp(cbind(Gewicht_g,Diag_mm), cor = F)
KLT = ll2$loadings
biplot(ll2, xlabs="NED1", ylabs="NED2" )
biplot(ll2, xlab="NED1", ylab="NED2" )
Gew_g = t$V2
Diag_mm = t$V3
library(FactoMineR)
ll2 = princomp(cbind(Gew_g,Diag_mm), cor = F)
KLT = ll2$loadings
biplot(ll2, xlab="NED1", ylab="NED2" )
G_g = t$V2
Diag_mm = t$V3
library(FactoMineR)
ll2 = princomp(cbind(G_g,Diag_mm), cor = F)
KLT = ll2$loadings
biplot(ll2, xlab="NED1", ylab="NED2" )
library(FactoMineR)
ll2 = princomp(cbind(G_g,Diag_mm), cor = F)
KLT = ll2$loadings
biplot(ll2, xlab="NED1", ylab="NED2" )
ll2$scores
a1 = aov(ll2$scores[,1]~t$V1)
summary(a1)
a2 = aov(ll2$scores[,2]~t$V1)
summary(a2)
ll2$center
mean(ll2$scores)
colmean(ll2$scores)
colMeans(ll2$scores)
ll2$scores[,1]
mean(ll2$scores[,1])
KLT
t(KLT)
KLT
