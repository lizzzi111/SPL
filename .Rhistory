formula = G3~.,
modellist = modellist,
metric = "RMSE",
model_setup = model_setup_reg )
min(por_reg_fitB$SVM$results$RMSE)
min(por_reg_fitB$NN$results$RMSE)
min(por_reg_fitB$RF$results$RMSE)
min(por_reg_fitB$DT$results$RMSE)
saveRDS(por_reg_fitB, "./SPL_Q5_predictions/models/por_reg_fitB.RDS")
# for the Naive Bayes in the paper G1 was used in the setting B
# we check the error with our custom function
rmse(data_reg_por$G1,data_reg_por$G3)
# C: A without G2 & G1
por_reg_fitC = modelsLib(data = data_reg_por[, !(colnames(data_reg_por)%in%c("G2","G1"))],
formula = G3~.,
modellist = modellist,
metric = "RMSE",
model_setup = model_setup_reg )
min(por_reg_fitC$SVM$results$RMSE)
min(por_reg_fitC$NN$results$RMSE)
min(por_reg_fitC$RF$results$RMSE)
min(por_reg_fitC$DT$results$RMSE)
saveRDS(por_reg_fitC, "./SPL_Q5_predictions/models/por_reg_fitC.RDS")
# for the Naive Bayes in the paper the average output value was used in the setting C
# we check the error with our custom function
# we won't do it using CV, we will come to the same value
rmse(rep(mean(data_reg_por$G3), 649),data_reg_por$G3)
min(mat_reg_fitA$SVM$results$RMSE)
min(mat_reg_fitA$NN$results$RMSE)
min(mat_reg_fitA$RF$results$RMSE)
min(mat_reg_fitA$DT$results$RMSE)
min(mat_reg_fitC$SVM$results$RMSE)
min(mat_reg_fitC$NN$results$RMSE)
min(mat_reg_fitC$RF$results$RMSE)
min(por_reg_fitA$SVM$results$RMSE)
min(por_reg_fitA$NN$results$RMSE)
min(por_reg_fitA$RF$results$RMSE)
min(por_reg_fitA$DT$results$RMSE)
min(por_reg_fitB$NN$results$RMSE)
min(por_reg_fitC$NN$results$RMSE)
dataz = data_reg_mat[, !(colnames(data_reg_mat)%in%c("Pstatus", "reason", "freetime", "nursery", "Fjob"))]
# A, all the independent variables
mat_reg_fitA = modelsLib(data = dataz,
formula = G3~.,
modellist = modellist,
metric = "RMSE",
model_setup = model_setup_reg )
min(mat_reg_fitA$SVM$results$RMSE)
min(mat_reg_fitA$NN$results$RMSE)
min(mat_reg_fitA$RF$results$RMSE)
min(mat_reg_fitA$DT$results$RMSE)
rmse(mean(data_reg_mat$G1, data_reg_mat$G2),data_reg_mat$G3)
mean(data_reg_mat$G1, data_reg_mat$G2)
data_reg_mat$G2
data_reg_mat$G1
typeof(data_reg_mat$G1)
rmse(median(data_reg_mat$G1, data_reg_mat$G2),data_reg_mat$G3)
rmse(mean(data_reg_mat$G1, data_reg_mat$G2),data_reg_mat$G3)
rmse(round(mean(data_reg_mat$G1, data_reg_mat$G2)),data_reg_mat$G3)
rmse(round(mean(data_reg_mat$G1, data_reg_mat$G2),0),data_reg_mat$G3)
rmse(colMeans(cbind(data_reg_mat$G1, data_reg_mat$G2),0),data_reg_mat$G3)
rmse(colMeans(cbind(data_reg_mat$G1, data_reg_mat$G2)),data_reg_mat$G3)
colMeans(cbind(data_reg_mat$G1, data_reg_mat$G2))
rmse(row.Means(cbind(data_reg_mat$G1, data_reg_mat$G2)),data_reg_mat$G3)
rmse(rowMeans(cbind(data_reg_mat$G1, data_reg_mat$G2)),data_reg_mat$G3)
data_reg_por = readRDS("./data/student-por_reg.rds")
fitZ = modelsLib(data = dataz(data_reg_por),
formula = G3~.,
modellist = modellist,
metric = "RMSE",
model_setup = model_setup_reg )
min(fitZ$SVM$results$RMSE)
min(fitZ$NN$results$RMSE)
min(fitZ$RF$results$RMSE)
min(fitZ$DT$results$RMSE)
rmse(rowMeans(cbind(data_reg_mat$G1, data_reg_mat$G2)),data_reg_mat$G3)
dataz = function(df){
df[, !(colnames(df)%in%c("Pstatus", "reason", "freetime", "nursery", "Fjob"))]
return(df)
}
fitZ = modelsLib(data = dataz(data_reg_por),
formula = G3~.,
modellist = modellist,
metric = "RMSE",
model_setup = model_setup_reg )
min(fitZ$SVM$results$RMSE)
min(fitZ$NN$results$RMSE)
min(fitZ$RF$results$RMSE)
min(fitZ$DT$results$RMSE)
rmse(rowMeans(cbind(data_reg_mat$G1, data_reg_mat$G2)),data_reg_mat$G3)
data_bin_mat = readRDS("./data/student-mat_bin.rds")
data_bin_mat = readRDS("./data/student-mat_binary.rds")
data_bin_por = readRDS("./data/student-por_binary.rds")
fitZ = modelsLib(data = dataz(data_bin_mat),
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup_reg )
max(fitZ$SVM$results$Accuracy)
max(fitZ$NN$results$Accuracy)
max(fitZ$RF$results$Accuracy)
max(fitZ$DT$results$Accuracy)
fitZ = modelsLib(data = dataz(data_bin_mat),
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
max(fitZ$SVM$results$Accuracy)
max(fitZ$NN$results$Accuracy)
max(fitZ$RF$results$Accuracy)
max(fitZ$DT$results$Accuracy)
table(c(dataz$G1, dataz$G2))
c(dataz$G1, dataz$G2)
pcc(table(c(dataz(data_bin_mat)$G1, dataz(data_bin_mat)$G2)),dataz(data_bin_mat)$G3)
table(c(dataz(data_bin_mat)$G1, dataz(data_bin_mat)$G2))
data_bin_mat$G1
dataz(data_bin_mat)$G1
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
rmse(rowMeans(cbind(dataz$G1, dataz$G2)),dataz$G3)
rmse(rowMeans(cbind(dataz(data_reg_por)$G1, dataz(data_reg_por)$G2)),dataz(data_reg_por)$G3)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
pcc(Mode(c(dataz(data_bin_mat)$G1, dataz(data_bin_mat)$G2)),dataz(data_bin_mat)$G3)
Mode(c(dataz(data_bin_mat)$G1, dataz(data_bin_mat)$G2))
mod= Mode(c(dataz(data_bin_mat)$G1, dataz(data_bin_mat)$G2))
pcc(mod*length(dataz(data_bin_mat)$G3),dataz(data_bin_mat)$G3)
mod*length(dataz(data_bin_mat)$G3)
dataz(data_bin_mat)$G1
label(mod)
levels(mod)
pcc(repeat('pass', length(dataz(data_bin_mat)$G3)),dataz(data_bin_mat)$G3)
pcc(repeat('pass', length(dataz(data_bin_mat)$G3)),dataz(data_bin_mat)$G3)
?repeat
?repeat()
pcc(replicate('pass', length(dataz(data_bin_mat)$G3)),dataz(data_bin_mat)$G3)
pcc(times('pass', length(dataz(data_bin_mat)$G3)),dataz(data_bin_mat)$G3)
'a'*8
pcc(rep('pass', length(dataz(data_bin_mat)$G3)),dataz(data_bin_mat)$G3)
rep('pass', length(dataz(data_bin_mat)$G3))
levels(dataz(data_bin_mat)$G1)
pcc(rep(factor('pass', levels = c('fail', 'pass')), length(dataz(data_bin_mat)$G3)),dataz(data_bin_mat)$G3)
pcc(c(dataz(data_bin_mat)$G1, length(dataz(data_bin_mat)$G3)),dataz(data_bin_mat)$G3)
pcc(dataz(data_bin_mat)$G1,dataz(data_bin_mat)$G3)
pcc(dataz(data_bin_mat)$G2,dataz(data_bin_mat)$G3)
fitZ = modelsLib(data = dataz(data_bin_por),
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
max(fitZ$SVM$results$Accuracy)
max(fitZ$NN$results$Accuracy)
max(fitZ$RF$results$Accuracy)
max(fitZ$DT$results$Accuracy)
mod = Mode(c(dataz(data_bin_por)$G1, dataz(data_bin_por)$G2))
pcc(dataz(data_bin_por)$G2,dataz(data_bin_por)$G3)
data_bin_mul = readRDS("./data/student-mat_multiclass.rds")
data_bin_pul = readRDS("./data/student-por_multiclass.rds")
fitZ = modelsLib(data = dataz(data_mul_por),
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
max(fitZ$SVM$results$Accuracy)
max(fitZ$NN$results$Accuracy)
max(fitZ$RF$results$Accuracy)
max(fitZ$DT$results$Accuracy)
pcc(dataz(data_mul_por)$G2,dataz(data_mul_por)$G3)
max(fitZ$NN$results$Accuracy, na.rm = TRUE)
data_mul_por
fitZ = modelsLib(data = dataz(data_mul_mat),
formula = G3~.,
modellist = modellist,
metric = "Accuracy",
model_setup = model_setup )
max(fitZ$SVM$results$Accuracy)
max(fitZ$NN$results$Accuracy, na.rm = TRUE)
max(fitZ$RF$results$Accuracy)
max(fitZ$DT$results$Accuracy)
result_plots = function(df, goal_var){
list.of.packages <- c("ggplot2")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, dependencies = TRUE)
library(ggplot2)
regr_title = "Regression Performance Results"
bin_title = "Binary Performance Results"
mult_title = "Multiclass Performance Results"
if(is.numeric(df$goal_var)){
accuracy = rmse
title = regr_title
} else {
if(length(levels(df$goal_var))>2){
accuracy = pcc
title = mult_title
} else {
accuracy = df$pcc
title = bin_title
}
}
library(pryr)
boxplot1 = plot(accuracy~model, df, main = title)
# boxplot = ggplot(df, aes(x=model, y=accuracy, colour = Input_type, shape=Input_type, group= Input_type))+
#    geom_boxplot(size=2)
line_plot = ggplot(df, aes(x=model, y=as.character(deparse(substitute(accuracy))), colour = Input_type, shape=Input_type, group= Input_type))+
geom_line(size=2) +
geom_point(size=4) +
facet_grid(df$Class~.) +
theme(text = element_text(size=15),
axis.text.x = element_text(angle=90, hjust=1), plot.title = element_text(size = 15,lineheight=.8, face="bold")) +
ggtitle(title)+theme_bw()
output = list(boxplot = boxplot, lines = line_plot)
return(output)
}
ff = result_plots(binary, "G3")
binary = read.csv2("./SPL_Q6_results_analysis/binary_fin.csv")
df = binary
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class ~ .)
list.of.packages = c("ggplot2")
new.packages = list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if (length(new.packages))
install.packages(new.packages, dependencies = TRUE)
library(ggplot2)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class ~ .)
if (any(names(df) %in% "rmse")) {
accuracy = df$rmse
title = ifelse(is.null(title), regr_title, title)
ax_title_y = "Root Mean Squarred Error"
} else {
accuracy = df$pcc
title = ifelse(is.null(title), class_title, title)
ax_title_y = "Percentage of Correctly Classified values"
}
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class ~ .)
update.packages("ggplot2")
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class ~ .)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class ~ ., scales = freeny)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class ~ ., scales = 'free')
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class ~ ., scales = 'free_x')
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_wrap(df$Class ~ .)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_wrap(df$Class ~ )
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_wrap( ~ df$Class)
binary[binary$Input_type=='C'& binary$Class=='M' & (binary$model=='DT'|binary$model=='NN' ),]
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid( ~ df$Class)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~.)
result_plots = function(df, title = NULL) {
list.of.packages = c("ggplot2")
new.packages = list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if (length(new.packages))
install.packages(new.packages, dependencies = TRUE)
library(ggplot2)
regr_title = "Regression Results"
class_title = "Classification Performance Results"
if (any(names(df) %in% "rmse")) {
accuracy = df$rmse
title = ifelse(is.null(title), regr_title, title)
ax_title_y = "Root Mean Squarred Error"
} else {
accuracy = df$pcc
title = ifelse(is.null(title), class_title, title)
ax_title_y = "Percentage of Correctly Classified values"
}
boxplot = ggplot(aes(y = accuracy, x = model), data = df) +
geom_boxplot() +
theme_bw() +
labs(y = ax_title_y) +
ggtitle(title)
line_plot = ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~.) +
theme(text = element_text(size = 15),
axis.text.x = element_text(angle = 90, hjust = 1),
plot.title = element_text(size = 15,lineheight = 0.8, face = "bold")) +
ggtitle(title) +
theme_bw() +
labs(y = ax_title_y)
output = list(boxplot = boxplot, lines = line_plot)
return(output)
}
bin = result_plots(binary, "Binary Classification Performance")
bin$boxplot
bin$lines
bin$lines$scales
bin$lines$data
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~., scales = 'free')
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~., scales = 'free_y')
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~., scales = 'free_x')
ff = df[df$Input_type!='C',]
result_plots(ff)
devtools::install_github("tidyverse/ggplot2")
install.packages(devtools)
devtools::install_github("tidyverse/ggplot2")
install.packages("devtools")
devtools::install_github("tidyverse/ggplot2")
update.packages(scales)
update.packages('scales')
devtools::install_github("tidyverse/ggplot2")
install.packages("scales")
install.packages("scales")
devtools::install_github("tidyverse/ggplot2")
remove.packages("ggplot2", lib="~/R/R-3.4.1/library")
devtools::install_github("tidyverse/ggplot2")
install.packages("ggplot2")
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~.)
library(ggplot2)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~.)
require(devtools)
install_version("ggplot2", version = "0.9.1", repos = "http://cran.us.r-project.org")
remove.packages("ggplot2", lib="~/R/R-3.4.1/library")
require(devtools)
install_version("ggplot2", version = "0.9.1", repos = "http://cran.us.r-project.org")
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~df$model)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~df$accuracy)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~.)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~., drop = TRUE)
?facet_grid
??facet_grid
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/R-3.4.1/library")
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~. )
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~.,drop = FALSE )
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~.,drop = T)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid('df$Class')
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~., margins = TRUE)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~., shrink = T)
require(devtools)
install_version("ggplot2", version = "0.9.1", repos = "http://cran.us.r-project.org")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/R-3.4.1/library")
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
#         geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~.)
ggplot(df, aes(x = model, y = accuracy, colour = Input_type,
shape = Input_type, group = Input_type)) +
geom_line(size = 2) +
geom_point(size = 4) +
facet_grid(df$Class~.)
remove.packages("ggplot2", lib="~/R/R-3.4.1/library")
source(file = "./SPL_Q5_predictions/SPL_predictions.R")
source(file = "./SPL_Q5_predictions/metrics_for_evaluation.R")
source(file = "./SPL_Q5_predictions/model_setup.R")
data_reg_mat = readRDS("./data/student-mat_reg.rds")
# C: A without G2 & G1
mat_reg_fitC = modelsLib(data = data_reg_mat[, !(colnames(data_reg_mat)%in%c("G2","G1"))],
formula = G3~.,
modellist = modellist,
metric = "RMSE",
model_setup = model_setup_reg )
min(mat_reg_fitC$SVM$results$RMSE)
min(mat_reg_fitC$NN$results$RMSE)
min(mat_reg_fitC$RF$results$RMSE)
min(mat_reg_fitC$DT$results$RMSE)
mat_reg_fitC = modelsLib(data = data_reg_mat[, !(colnames(data_reg_mat)%in%c("G2","G1"))],
formula = G3~.,
modellist = modellist,
metric = "RMSE",
model_setup = model_setup_reg )
source(file = "./SPL_Q5_predictions/SPL_predictions.R")
source(file = "./SPL_Q5_predictions/metrics_for_evaluation.R")
source(file = "./SPL_Q5_predictions/model_setup.R")
mat_reg_fitC = modelsLib(data = data_reg_mat[, !(colnames(data_reg_mat)%in%c("G2","G1"))],
formula = G3~.,
modellist = modellist,
metric = "RMSE",
model_setup = model_setup_reg )
min(mat_reg_fitC$SVM$results$RMSE)
min(mat_reg_fitC$NN$results$RMSE)
min(mat_reg_fitC$RF$results$RMSE)
min(mat_reg_fitC$DT$results$RMSE)
source(file = "./SPL_Q5_predictions/SPL_predictions.R")
source(file = "./SPL_Q5_predictions/metrics_for_evaluation.R")
source(file = "./SPL_Q5_predictions/model_setup.R")
data_reg_mat = readRDS("./data/student-mat_reg.rds")
mat_reg_fitC = modelsLib(data = data_reg_mat[, !(colnames(data_reg_mat)%in%c("G2","G1"))],
formula = G3~.,
modellist = modellist,
metric = "RMSE",
model_setup = model_setup_reg )
install.packages("ggplot2")
